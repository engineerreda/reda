name: CI

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04  # Use Ubuntu 22.04

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Docker
      - name: Set up Docker
        run: |
          sudo apt-get update
          sudo apt-get purge -y containerd*  # Remove conflicting containerd packages
          sudo apt-get install -y docker.io  # Install Docker without conflicts
          sudo systemctl start docker

      # Step 3: Fix Held Packages
      - name: Fix Held Packages
        run: |
          sudo apt-get update
          sudo apt-mark unhold $(sudo apt-mark showhold) || true  # Unhold all held packages
          sudo apt-get -f install -y  # Fix broken dependencies
          sudo apt-get autoremove -y  # Remove unused packages
          sudo apt-get autoclean -y  # Clean old packages

      # Step 4: Pull official Ubuntu Docker Image
      - name: Pull Ubuntu Docker Image
        run: |
          docker pull ubuntu:22.04  # Use Ubuntu 22.04 image

      # Step 5: Install Dependencies inside Docker
      - name: Install Dependencies
        run: |
          docker run --rm \
            -v ${PWD}:/project \
            -w /project \
            ubuntu:22.04 bash -c " \
            apt-get update && \
            apt-get install -y software-properties-common && \
            add-apt-repository ppa:deadsnakes/ppa -y && \
            apt-get update && \
            apt-get install -y python3.10 python3.10-venv python3-pip && \
            if [ -f /usr/bin/python3 ]; then rm /usr/bin/python3; fi && \
            ln -s /usr/bin/python3.10 /usr/bin/python3 && \
            python3 --version"

      # Step 6: Build APK using Docker
      - name: Build APK using Docker
        run: |
          docker run --rm \
            -v ${PWD}:/project \
            -w /project \
            --user $(id -u):$(id -g) \
            ubuntu:22.04 bash -c " \
            python3 -m venv env && \  # Create a virtual environment
            source env/bin/activate && \  # Activate the virtual environment
            python -m pip install --upgrade pip setuptools wheel && \  # Upgrade pip and install dependencies
            pip install buildozer cython kivy && \  # Install Buildozer and its requirements
            if [ ! -f buildozer.spec ]; then buildozer init --profile=android; fi && \  # Create buildozer.spec if missing
            echo 'Building APK...' && \
            buildozer --noinput android debug && \  # Build the APK
            if [ -d bin ]; then ls -la bin/; else echo 'Error: bin directory not found!'; exit 1; fi"  # Check if bin directory exists

      # Step 7: Upload APK
      - name: Upload APK
        if: success()  # Run only if previous step succeeds
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: bin/*.apk
